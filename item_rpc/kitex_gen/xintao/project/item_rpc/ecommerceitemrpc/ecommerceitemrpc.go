// Code generated by Kitex v0.2.0. DO NOT EDIT.

package ecommerceitemrpc

import (
	"context"
	"github.com/XiaoXinTao/goproject/item_rpc/kitex_gen/xintao/project/item_rpc"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return ecommerceItemRpcServiceInfo
}

var ecommerceItemRpcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "EcommerceItemRpc"
	handlerType := (*item_rpc.EcommerceItemRpc)(nil)
	methods := map[string]kitex.MethodInfo{
		"OrderItem":       kitex.NewMethodInfo(orderItemHandler, newEcommerceItemRpcOrderItemArgs, newEcommerceItemRpcOrderItemResult, false),
		"GetItem":         kitex.NewMethodInfo(getItemHandler, newEcommerceItemRpcGetItemArgs, newEcommerceItemRpcGetItemResult, false),
		"CreateItemGroup": kitex.NewMethodInfo(createItemGroupHandler, newEcommerceItemRpcCreateItemGroupArgs, newEcommerceItemRpcCreateItemGroupResult, false),
		"UpdateItem":      kitex.NewMethodInfo(updateItemHandler, newEcommerceItemRpcUpdateItemArgs, newEcommerceItemRpcUpdateItemResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "item_rpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.2.0",
		Extra:           extra,
	}
	return svcInfo
}

func orderItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item_rpc.EcommerceItemRpcOrderItemArgs)
	realResult := result.(*item_rpc.EcommerceItemRpcOrderItemResult)
	success, err := handler.(item_rpc.EcommerceItemRpc).OrderItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEcommerceItemRpcOrderItemArgs() interface{} {
	return item_rpc.NewEcommerceItemRpcOrderItemArgs()
}

func newEcommerceItemRpcOrderItemResult() interface{} {
	return item_rpc.NewEcommerceItemRpcOrderItemResult()
}

func getItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item_rpc.EcommerceItemRpcGetItemArgs)
	realResult := result.(*item_rpc.EcommerceItemRpcGetItemResult)
	success, err := handler.(item_rpc.EcommerceItemRpc).GetItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEcommerceItemRpcGetItemArgs() interface{} {
	return item_rpc.NewEcommerceItemRpcGetItemArgs()
}

func newEcommerceItemRpcGetItemResult() interface{} {
	return item_rpc.NewEcommerceItemRpcGetItemResult()
}

func createItemGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item_rpc.EcommerceItemRpcCreateItemGroupArgs)
	realResult := result.(*item_rpc.EcommerceItemRpcCreateItemGroupResult)
	success, err := handler.(item_rpc.EcommerceItemRpc).CreateItemGroup(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEcommerceItemRpcCreateItemGroupArgs() interface{} {
	return item_rpc.NewEcommerceItemRpcCreateItemGroupArgs()
}

func newEcommerceItemRpcCreateItemGroupResult() interface{} {
	return item_rpc.NewEcommerceItemRpcCreateItemGroupResult()
}

func updateItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item_rpc.EcommerceItemRpcUpdateItemArgs)
	realResult := result.(*item_rpc.EcommerceItemRpcUpdateItemResult)
	success, err := handler.(item_rpc.EcommerceItemRpc).UpdateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEcommerceItemRpcUpdateItemArgs() interface{} {
	return item_rpc.NewEcommerceItemRpcUpdateItemArgs()
}

func newEcommerceItemRpcUpdateItemResult() interface{} {
	return item_rpc.NewEcommerceItemRpcUpdateItemResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) OrderItem(ctx context.Context, req *item_rpc.OrderItemRequest) (r *item_rpc.OrderItemResponse, err error) {
	var _args item_rpc.EcommerceItemRpcOrderItemArgs
	_args.Req = req
	var _result item_rpc.EcommerceItemRpcOrderItemResult
	if err = p.c.Call(ctx, "OrderItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetItem(ctx context.Context, req *item_rpc.GetItemRequest) (r *item_rpc.GetItemResponse, err error) {
	var _args item_rpc.EcommerceItemRpcGetItemArgs
	_args.Req = req
	var _result item_rpc.EcommerceItemRpcGetItemResult
	if err = p.c.Call(ctx, "GetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateItemGroup(ctx context.Context, req *item_rpc.CreateItemGroupRequest) (r *item_rpc.CreateItemGroupResponse, err error) {
	var _args item_rpc.EcommerceItemRpcCreateItemGroupArgs
	_args.Req = req
	var _result item_rpc.EcommerceItemRpcCreateItemGroupResult
	if err = p.c.Call(ctx, "CreateItemGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateItem(ctx context.Context, req *item_rpc.UpdateItemRequest) (r *item_rpc.UpdateItemResponse, err error) {
	var _args item_rpc.EcommerceItemRpcUpdateItemArgs
	_args.Req = req
	var _result item_rpc.EcommerceItemRpcUpdateItemResult
	if err = p.c.Call(ctx, "UpdateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
